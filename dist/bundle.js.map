{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/contentScript.js","webpack:///./utils/colorPlayers.js"],"sourcesContent":["import { colorPlayers } from \"../utils/colorPlayers\";\n\n// Mutation Observer\nwindow.addEventListener(\"load\", function () {\n    const observer = new MutationObserver(function (mutations) {\n        observer.disconnect();\n\n        mutations.forEach(function (mutation) {\n            checkScores();\n        });\n        observeDOM();\n    });\n\n    function observeDOM() {\n        observer.observe(document.body, {\n            childList: true,\n            characterData: true,\n            subtree: true\n        });\n    }\n    observeDOM();\n});\n\n// Background color changes\nconst style = document.createElement('style');\nstyle.textContent = `\n    .in-game {\n        background-color: transparent !important;\n    }\n    .in-game-flip {\n        background-color: transparent !important;\n    }\n`;\n\ndocument.head.appendChild(style);\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.type = \"text/css\";\ndocument.head.appendChild(styleSheet);\n\n// Declare variables\nlet retryCount = 0;\nconst maxRetries = 1;\n\n// Check scores function\nfunction checkScores() {\n\n    // Fetch both users (opponent and yourself)\n    const users = document.querySelectorAll(\".matchup-row .user\");\n\n    // Fetch both scores for users (2 divs)\n    const scores = document.querySelectorAll(\".matchup-row .user .score\");\n\n    // Fetch all players sections (opponent and your players grouped by position)\n    const allPlayers = document.querySelector(\".player-section\"); \n    \n    // Filter above by scores only\n    const allPlayersScores = allPlayers ? allPlayers.querySelectorAll(\".player-scoring .score\") : [];\n\n    colorPlayers(allPlayersScores);\n\n    // Users and Scores captured:\n    if (users.length === 2 && scores.length === 2) {\n        // Check if either score contains '-'\n        const isScore1Dash = scores[0].textContent.trim() === \"-\";\n        const isScore2Dash = scores[1].textContent.trim() === \"-\";\n\n        // Declare my score and opponents score \n        let myScore = isScore1Dash ? 0 : parseFloat(scores[0].textContent);\n        let opponentScore = isScore2Dash ? 0 : parseFloat(scores[1].textContent);\n\n        // Difference:\n        const difference = myScore - opponentScore;\n\n        // Add difference element:\n        let displayText = \"\";\n        // Losing (negative difference):\n        if (difference < 0) {\n            displayText = `Losing by ${difference.toFixed(2)}`;\n        // Winning (positive difference):\n        } else if (difference > 0) {\n            displayText = `Winning by ${difference.toFixed(2)}`;\n        // Tied:\n        } else {\n            displayText = 'Tied'\n        }\n        \n        // Create element scoreDifferenceDisplay\n        let differenceElement = document.querySelector(\"#scoreDifferenceDisplay\");\n\n        // Add displayElement traits:\n        if (!differenceElement) {\n            differenceElement = document.createElement(\"div\");\n            differenceElement.id = \"scoreDifferenceDisplay\";\n            document.body.appendChild(differenceElement);\n            differenceElement.textContent = displayText;\n            differenceElement.style.padding = '10px';\n            differenceElement.style.textAlign = 'center';\n            differenceElement.style.backgroundColor = difference < 0 ? 'rgba(255, 0, 0, 0.15)' : (difference === 0 ? 'rgba(255, 255, 0, 0.15)' : 'rgba(0, 128, 0, 0.15)');\n            differenceElement.style.fontSize = '16px';\n            differenceElement.style.marginTop = '0px';\n            differenceElement.style.marginBottom = '10px';\n            differenceElement.style.borderRadius = '8px';\n        }\n\n        // Insert the element:\n        const matchupHeader = document.querySelector('.matchup-row');\n        if (matchupHeader && matchupHeader.parentNode) {\n            matchupHeader.parentNode.insertBefore(differenceElement, matchupHeader.nextSibling);\n        }\n\n        // Change colors for header:\n        const ownerItems = document.querySelectorAll('.matchup-owner-item');\n        if (ownerItems.length === 2) {\n            const ownerItem1 = ownerItems[0];\n            const ownerItem2 = ownerItems[1];\n            if (difference < 0) {\n                    ownerItem1.style.backgroundColor = 'rgba(255, 0, 0, 0.15)';\n                    ownerItem2.style.backgroundColor = 'rgba(0, 128, 0, 0.15)';\n            } else if (difference > 0) {\n                    ownerItem1.style.backgroundColor = 'rgba(0, 128, 0, 0.15)';\n                    ownerItem2.style.backgroundColor = 'rgba(255, 0, 0, 0.15)';\n            } else {  // tie\n                    ownerItem1.style.backgroundColor = 'rgba(255, 255, 0, 0.15)';\n                    ownerItem2.style.backgroundColor = 'rgba(255, 255, 0, 0.15)';\n                }\n            }\n        \n\n    } else if (retryCount >= maxRetries) {\n        console.log('Max retries reached, giving up...');\n    } else {\n        console.log('Could not find the scores, retrying...');\n        retryCount++;\n    }\n}\n\n// Reset colors\nfunction resetBackgroundColor(element) {\n    if (element) {\n        element.style.backgroundColor = '';\n        element.style.borderRadius = '';\n    }\n}\n\n","// utils/colorPlayers.js\n\nexport function colorPlayers(allPlayersScores) {\n    console.log('colorPlayers function is running');\n\n    // Declare max difference of 2\n    let maxDifference = 0;\n\n    // Calculate the max difference between any 2 players of the same position\n    for (let i = 0; i < allPlayersScores.length; i += 2) {\n        const score1 = parseFloat(allPlayersScores[i].textContent.trim()) || 0;\n        const score2 = parseFloat(allPlayersScores[i + 1].textContent.trim()) || 0;\n        maxDifference = Math.max(maxDifference, Math.abs(score1 - score2));\n    }\n\n    // Iterate through each player score and apply colors\n    for (let i = 0; i < allPlayersScores.length; i += 2) {\n        const score1Element = allPlayersScores[i];\n        const score2Element = allPlayersScores[i + 1];\n\n        const isScore1Dash = score1Element.textContent.trim() === \"-\";\n        const isScore2Dash = score2Element.textContent.trim() === \"-\";\n        let score1 = isScore1Dash ? 0 : parseFloat(score1Element.textContent);\n        let score2 = isScore2Dash ? 0 : parseFloat(score2Element.textContent);\n\n        const difference = Math.abs(score1 - score2);\n        const intensity = difference / maxDifference * 0.15 + 0.05;\n\n        const playerItem1 = score1Element.closest('.matchup-player-item');\n        const playerItem2 = score2Element.closest('.matchup-player-item');\n\n        playerItem1.style.borderRadius = '8px';\n        playerItem2.style.borderRadius = '8px';\n\n        if (score1 < score2) {\n            playerItem1.style.backgroundColor = `rgba(255, 0, 0, ${intensity})`;\n            playerItem2.style.backgroundColor = `rgba(0, 128, 0, ${intensity})`;\n        } else if (score1 > score2) {\n            playerItem1.style.backgroundColor = `rgba(0, 128, 0, ${intensity})`;\n            playerItem2.style.backgroundColor = `rgba(255, 0, 0, ${intensity})`;\n        } else {\n            playerItem1.style.backgroundColor = `rgba(255, 255, 0, ${intensity + .05})`;\n            playerItem2.style.backgroundColor = `rgba(255, 255, 0, ${intensity + .05})`;\n        }\n    }\n}\n"],"names":["window","addEventListener","observer","MutationObserver","mutations","disconnect","forEach","mutation","users","document","querySelectorAll","scores","allPlayers","querySelector","allPlayersScores","console","log","maxDifference","i","length","score1","parseFloat","textContent","trim","score2","Math","max","abs","score1Element","score2Element","isScore1Dash","isScore2Dash","intensity","playerItem1","closest","playerItem2","style","borderRadius","backgroundColor","colorPlayers","difference","displayText","toFixed","differenceElement","createElement","id","body","appendChild","padding","textAlign","fontSize","marginTop","marginBottom","matchupHeader","parentNode","insertBefore","nextSibling","ownerItems","ownerItem1","ownerItem2","retryCount","maxRetries","checkScores","observeDOM","observe","childList","characterData","subtree","head","styleSheet","type"],"sourceRoot":""}