{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/content-script.js","webpack:///./utils/color-players.js","webpack:///./utils/score-difference.js"],"sourcesContent":["import { colorPlayers } from \"../utils/color-players\";\nimport { displayScoreDifference } from \"../utils/score-difference\";\n\n// Mutation Observer\nwindow.addEventListener(\"load\", function () {\n    const observer = new MutationObserver(function (mutations) {\n        observer.disconnect();\n\n        mutations.forEach(function (mutation) {\n            main();\n        });\n        observeDOM();\n    });\n\n    function observeDOM() {\n        observer.observe(document.body, {\n            childList: true,\n            characterData: true,\n            subtree: true\n        });\n    }\n    observeDOM();\n});\n\n// Main functionality:\nlet oldPlayers = null; // Store the previous state globally\n\nfunction main() {\n    // Fetch the current players section\n    const allPlayers = document.querySelector(\".player-section\");\n\n    // Ensure that `allPlayers` exists and has changed since the last call\n    if (allPlayers && oldPlayers !== allPlayers.innerHTML) {\n        const users = document.querySelectorAll(\".matchup-row .user\");\n        const scores = document.querySelectorAll(\".matchup-row .user .score\");\n\n        // Apply the custom color formatting and score difference display\n        colorPlayers(allPlayers);\n        displayScoreDifference(users, scores);\n\n        // Update the oldPlayers state to the current one\n        oldPlayers = allPlayers.innerHTML;\n    }\n}\n","export function colorPlayers(allPlayers) {\n    // Reset the colors of in-game items\n    resetInGameItemColors();\n\n    const allPlayersScores = allPlayers ? allPlayers.querySelectorAll(\".player-scoring .score\") : [];\n    // Declare max difference of 2\n    let maxDifference = 0;\n\n    // Calculate the max difference between any 2 players of the same position\n    for (let i = 0; i < allPlayersScores.length; i += 2) {\n        const score1 = parseFloat(allPlayersScores[i].textContent.trim()) || 0;\n        const score2 = parseFloat(allPlayersScores[i + 1].textContent.trim()) || 0;\n        maxDifference = Math.max(maxDifference, Math.abs(score1 - score2));\n    }\n\n    // Iterate through each player score and apply colors\n    for (let i = 0; i < allPlayersScores.length; i += 2) {\n        const score1Element = allPlayersScores[i];\n        const score2Element = allPlayersScores[i + 1];\n        // console.log(\"Score 1:\", score1Element);\n        // console.log(\"Score 2:\", score2Element);\n\n        //if (!score2Element) continue; // Skip if the second score is undefined\n\n        const isScore1Dash = score1Element.textContent.trim() === \"-\";\n        const isScore2Dash = score2Element.textContent.trim() === \"-\";\n        let score1 = isScore1Dash ? 0 : parseFloat(score1Element.textContent);\n        let score2 = isScore2Dash ? 0 : parseFloat(score2Element.textContent);\n\n        const difference = parseFloat((score1 - score2).toFixed(2));\n        const intensity = Math.abs(difference) / maxDifference * 0.15 + 0.05;\n\n        const playerItem1 = score1Element.closest('.matchup-player-item'),\n              playerItem2 = score2Element.closest('.matchup-player-item');\n\n        playerItem1.style.borderRadius = playerItem2.style.borderRadius = '8px';\n\n        if (score1 < score2) {\n            playerItem1.style.backgroundColor = `rgba(255, 0, 0, ${intensity})`;\n            playerItem2.style.backgroundColor = `rgba(0, 128, 0, ${intensity})`;\n        } else if (score1 > score2) {\n            playerItem1.style.backgroundColor = `rgba(0, 128, 0, ${intensity})`;\n            playerItem2.style.backgroundColor = `rgba(255, 0, 0, ${intensity})`;\n        }\n        // } else if (score1 === 0 || score2 === 0){\n        //     playerItem1.style.backgroundColor = `rgba(255, 255, 0, ${intensity + 0.05})`;\n        //     playerItem2.style.backgroundColor = `rgba(255, 255, 0, ${intensity + 0.05})`;\n        // }\n\n        console.log(\"DIFFERENCE: \", difference);\n        function formatDifference(difference) {\n            // Ensure difference has two decimal places\n            let formattedDifference = difference.toFixed(2);\n\n            // Add .00 or .x0 if needed\n            if (!formattedDifference.includes('.')) {\n                formattedDifference += '.00';\n            } else if (formattedDifference.split('.')[1].length === 1) {\n                formattedDifference += '0';\n            }\n\n            return formattedDifference;\n        }\n\n        const uniqueId1 = `difference-${i}`;\n        const uniqueId2 = `difference-${i + 1}`;\n\n        // Find or create the difference element for score1\n        let differenceElement1 = document.querySelector(`#${uniqueId1}`);\n        if (!differenceElement1) {\n            differenceElement1 = document.createElement('div');\n            differenceElement1.id = uniqueId1;\n            differenceElement1.className = 'score-difference-added'; // Optional: Add a class for styling\n            differenceElement1.style.fontSize = '9px';\n            differenceElement1.style.textAlign = 'center';\n            differenceElement1.style.marginTop = '3px';\n            score1Element.parentNode.insertBefore(differenceElement1, score1Element.nextSibling);\n        }\n        // Update text content of the existing or newly created element\n        differenceElement1.textContent = difference > 0 ? `+${formatDifference(difference)}` : formatDifference(difference);\n        differenceElement1.style.color = difference > 0 ? 'rgb(4,204,188)' : (difference < 0 ? 'rgb(251,44,107)' : 'white');\n\n        // Find or create the difference element for score2\n        let differenceElement2 = document.querySelector(`#${uniqueId2}`);\n        if (!differenceElement2) {\n            differenceElement2 = document.createElement('div');\n            differenceElement2.id = uniqueId2;\n            differenceElement2.className = 'score-difference-added'; // Optional: Add a class for styling\n            differenceElement2.style.fontSize = '9px';\n            differenceElement2.style.textAlign = 'center';\n            differenceElement2.style.marginTop = '3px';\n            score2Element.parentNode.insertBefore(differenceElement2, score2Element.nextSibling);\n        }\n        // Calculate the difference for score2Element\n        let differenceScore2 = parseFloat((score2 - score1).toFixed(2));\n\n        // Update text content of the existing or newly created element\n        differenceElement2.textContent = differenceScore2 > 0 ? `+${formatDifference(differenceScore2)}` : formatDifference(differenceScore2);\n        differenceElement2.style.color = differenceScore2 < 0 ? 'rgb(251,44,107)' : (differenceScore2 > 0 ? 'rgb(4,204,188)' : 'white');\n    }\n}\n\nfunction resetInGameItemColors() {\n    const inGameItems = document.querySelectorAll(\".matchup-player-body-item.in-game-flip, .matchup-player-body-item.in-game\");\n\n    inGameItems.forEach(item => {\n        // Reset styles of the main element\n        item.style.backgroundColor = 'rgba(255, 255, 255, 0.04)'; // White with 4% opacity\n\n        // Reset styles of child elements (if needed)\n        // Uncomment and customize these lines if you want to reset styles of child elements as well\n        // const allChildren = item.querySelectorAll(\"*\");\n        // allChildren.forEach(child => {\n        //     child.style.backgroundColor = 'rgba(255, 255, 255, 0.04)'; // White with 4% opacity for child elements\n        //     child.style.color = ''; // Reset text color\n        //     child.style.border = ''; // Reset any borders\n        // });\n    });\n}\n","// src/scoreDifference.js\n\nexport function displayScoreDifference(users, scores) {\n    console.log('displayScoreDifference function is running');\n\n    let retryCount = 0;\n    const maxRetries = 1;\n\n    // Check scores function\n    function checkScores() {\n        // Users and Scores captured:\n        if (users.length === 2 && scores.length === 2) {\n            // Check if either score contains '-'\n            const isScore1Dash = scores[0].textContent.trim() === \"-\";\n            const isScore2Dash = scores[1].textContent.trim() === \"-\";\n\n            // Declare my score and opponent's score \n            let myScore = isScore1Dash ? 0 : parseFloat(scores[0].textContent);\n            let opponentScore = isScore2Dash ? 0 : parseFloat(scores[1].textContent);\n\n            // Difference:\n            const difference = myScore - opponentScore;\n\n            // Add difference element:\n            let displayText = \"\";\n            // Losing (negative difference):\n            if (difference < 0) {\n                displayText = `Losing by ${difference.toFixed(2)}`;\n            // Winning (positive difference):\n            } else if (difference > 0) {\n                displayText = `Winning by ${difference.toFixed(2)}`;\n            // Tied:\n            } else {\n                displayText = 'Tied';\n            }\n\n            // Create or update element scoreDifferenceDisplay\n            let differenceElement = document.querySelector(\"#scoreDifferenceDisplay\");\n\n            if (!differenceElement) {\n                differenceElement = document.createElement(\"div\");\n                differenceElement.id = \"scoreDifferenceDisplay\";\n                document.body.appendChild(differenceElement);\n            }\n            \n            // Update display element traits:\n            differenceElement.textContent = displayText;\n            differenceElement.style.padding = '10px';\n            differenceElement.style.textAlign = 'center';\n            differenceElement.style.backgroundColor = difference < 0 ? 'rgba(255, 0, 0, 0.15)' : (difference === 0 ? 'rgba(64, 64, 64, 0.15)' : 'rgba(0, 128, 0, 0.15)');\n            differenceElement.style.fontSize = '16px';\n            differenceElement.style.marginTop = '0px';\n            differenceElement.style.marginBottom = '10px';\n            differenceElement.style.borderRadius = '8px';\n\n            // Insert the element:\n            const matchupHeader = document.querySelector('.matchup-row');\n            if (matchupHeader && matchupHeader.parentNode) {\n                matchupHeader.parentNode.insertBefore(differenceElement, matchupHeader.nextSibling);\n            }\n\n            // Change colors for header:\n            const ownerItems = document.querySelectorAll('.matchup-owner-item');\n            if (ownerItems.length === 2) {\n                const ownerItem1 = ownerItems[0];\n                const ownerItem2 = ownerItems[1];\n                if (difference < 0) {\n                    ownerItem1.style.backgroundColor = 'rgba(255, 0, 0, 0.15)';\n                    ownerItem2.style.backgroundColor = 'rgba(0, 128, 0, 0.15)';\n                } else if (difference > 0) {\n                    ownerItem1.style.backgroundColor = 'rgba(0, 128, 0, 0.15)';\n                    ownerItem2.style.backgroundColor = 'rgba(255, 0, 0, 0.15)';\n                } else {  // tie\n                    ownerItem1.style.backgroundColor = 'rgba(64, 64, 64, 0.15)';\n                    ownerItem2.style.backgroundColor = 'rgba(64, 64, 64, 0.15)';                                    \n                }\n            }\n        } else if (retryCount >= maxRetries) {\n            console.log('Max retries reached, giving up...');\n        } else {\n            console.log('Could not find the scores, retrying...');\n            retryCount++;\n            setTimeout(checkScores, 1000); // Retry after a short delay\n        }\n    }\n\n    checkScores();\n}\n"],"names":["window","addEventListener","observer","MutationObserver","mutations","disconnect","forEach","mutation","allPlayers","document","querySelector","oldPlayers","innerHTML","users","querySelectorAll","scores","item","style","backgroundColor","allPlayersScores","maxDifference","i","length","score1","parseFloat","textContent","trim","score2","Math","max","abs","score1Element","score2Element","isScore1Dash","isScore2Dash","difference","toFixed","intensity","playerItem1","closest","playerItem2","formatDifference","formattedDifference","includes","split","borderRadius","console","log","uniqueId1","uniqueId2","differenceElement1","createElement","id","className","fontSize","textAlign","marginTop","parentNode","insertBefore","nextSibling","color","differenceElement2","differenceScore2","colorPlayers","retryCount","checkScores","displayText","differenceElement","body","appendChild","padding","marginBottom","matchupHeader","ownerItems","ownerItem1","ownerItem2","setTimeout","displayScoreDifference","main","observeDOM","observe","childList","characterData","subtree"],"sourceRoot":""}